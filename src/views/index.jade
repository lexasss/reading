- var controlsID = 'controls';
- var textContainerID = 'textContainer';
- var textEditorID = 'textEditor';
- var optionsID = 'options';
- var statisticsID = 'statistics';
- var pathID = 'path';

doctype html
html
    head
        title Reading
        meta(charset="utf-8")
        link(rel='stylesheet', href='app.css')
        script(src='libs/gazeTargets/gazeTargets.js')
        script(src='libs/jscolor/jscolor.js')
        //- script(src='libs/Chart.min.js')
        script(src='libs/firebase.js')
    body

        div#text
            div(id=textContainerID)

        include ./components/controls.jade
        +controls( controlsID )

        include ./components/textEditor.jade
        +textEditor( textEditorID )

        include ./components/options.jade
        +options( optionsID )

        include ./components/statistics.jade
        +statistics( statisticsID )

        include ./components/path.jade
        +path( pathID )

        script(src='app.js')
        script.

            // DB
            Reading.firebase = new Firebase("https://burning-torch-9217.firebaseio.com/");

            // setup
            var textSplitter = new Reading.TextSplitter({ root: '##{textContainerID}' });
            var text = new Reading.Text({ root: '##{textContainerID}', textSplitter: textSplitter });
            var controls = new Reading.Controls({ root: '##{controlsID}', text: text });
            var options = new Reading.Options({ root: '##{optionsID}', textContainer: '##{textContainerID}' });
            var statistics = new Reading.Statistics({ root: '##{statisticsID}' });
            var path = new Reading.Path({ root: '##{pathID}' });

            var textEditor = new Reading.TextEditor({
                root: '##{textEditorID}',
                pageText: '##{textContainerID}'
            }, {
                splitText: function () {
                    textSplitter.split();
                }
            });

            var gazeTargetsManager = new Reading.GazeTargetsManager({
                trackingStarted: function () {
                    textSplitter.init();
                    statistics.init();
                    textEditor.lock();
                    options.lock();
                },
                trackingStopped: function () {
                    textSplitter.reset();
                    statistics.print();
                    textEditor.unlock();
                    options.unlock();
                },
                wordFocused: function (word) {
                    textSplitter.setFocusedWord( word );
                    statistics.setFocusedWord( word );
                },
                wordLeft: function (word) {
                    textSplitter.setFocusedWord( null );
                    statistics.setFocusedWord( null );
                },
                updateControls: controls.onStateUpdated,
                fixation: statistics.logFixation
            });
